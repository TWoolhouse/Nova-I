// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define NOVA_API __declspec(dllexport)
#define NOVA_API __declspec(dllimport)
#define NovaCerealise friend class Nova::cereal::access; template<typename Archive> void CEREAL_SERIALIZE_FUNCTION_NAME(Archive& serialise)
#define NovaCerealiseExtern(Type, name) template<typename Archive> void CEREAL_SERIALIZE_FUNCTION_NAME(Archive& serialise, Type& name)
#define NovaVarTypeListNew(name, size) namespace __vc_list_##name { constexpr size_t S = size; ::Nova::var::__v_list::Counter<0> Creator(::Nova::var::__v_list::Counter<0>); template <size_t I> struct E; }
#define NovaVarTypeList(name, type) namespace __vc_list_##name { template <> struct E<decltype(Creator(::Nova::var::__v_list::Counter<S>{}))::N > { using Type = type; }; ::Nova::var::__v_list::Counter<decltype(Creator(::Nova::var::__v_list::Counter<S>{}))::N + 1 > Creator(::Nova::var::__v_list::Counter<decltype(Creator(::Nova::var::__v_list::Counter<S>{}))::N + 1 > ); }
#define NovaVarTypeListFin(name) using name = typename ::Nova::var::__v_list::Generator<__vc_list_##name##::E, decltype(__vc_list_##name##::Creator(::Nova::var::__v_list::Counter<__vc_list_##name##::S>{}))::N>::pack;
